// <auto-generated />
using System;
using Lisbeth.Bot.DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Lisbeth.Bot.DataAccessLayer.Migrations
{
    [DbContext(typeof(LisbethBotDbContext))]
    [Migration("20211029140533_embedsembedsandmore")]
    partial class embedsembedsandmore
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Lisbeth.Bot.Domain.Entities.Ban", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AppliedById")
                        .HasColumnType("bigint")
                        .HasColumnName("applied_by_id");

                    b.Property<DateTime?>("AppliedUntil")
                        .IsRequired()
                        .HasColumnType("timestamp")
                        .HasColumnName("applied_until");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<long>("GuildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("guild_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_disabled");

                    b.Property<long>("LiftedById")
                        .HasColumnType("bigint")
                        .HasColumnName("lifted_by_id");

                    b.Property<DateTime?>("LiftedOn")
                        .HasColumnType("timestamp")
                        .HasColumnName("lifted_on");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("reason");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("ban");
                });

            modelBuilder.Entity("Lisbeth.Bot.Domain.Entities.EmbedConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Author")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("author");

                    b.Property<string>("AuthorImageUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("author_image_url");

                    b.Property<string>("AuthorUrl")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("author_url");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(4096)")
                        .HasColumnName("description");

                    b.Property<string>("Fields")
                        .HasColumnType("text")
                        .HasColumnName("fields");

                    b.Property<string>("Footer")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("footer");

                    b.Property<string>("FooterImageUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("footer_image_url");

                    b.Property<string>("HexColor")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("hex_color");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_disabled");

                    b.Property<string>("Thumbnail")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("thumbnail");

                    b.Property<int>("ThumbnailHeight")
                        .HasColumnType("integer")
                        .HasColumnName("thumbnail_height");

                    b.Property<int>("ThumbnailWidth")
                        .HasColumnType("integer")
                        .HasColumnName("thumbnail_width");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("timestamp")
                        .HasColumnName("timestamp");

                    b.Property<string>("Title")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("embed_config");
                });

            modelBuilder.Entity("Lisbeth.Bot.Domain.Entities.Guild", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("EmbedHexColor")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("embed_hex_color");

                    b.Property<long>("GuildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("guild_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_disabled");

                    b.Property<long?>("ReminderChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("reminder_channel_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("inviter_id");

                    b.HasKey("Id");

                    b.HasIndex("GuildId")
                        .IsUnique();

                    b.ToTable("guild");
                });

            modelBuilder.Entity("Lisbeth.Bot.Domain.Entities.GuildServerBooster", b =>
                {
                    b.Property<long>("GuildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("guild_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<long>("ServerBoosterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.HasKey("GuildId", "ServerBoosterId");

                    b.HasIndex("ServerBoosterId");

                    b.ToTable("guild_server_booster");
                });

            modelBuilder.Entity("Lisbeth.Bot.Domain.Entities.ModerationConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BaseMemberWelcomeMessage")
                        .HasColumnType("text")
                        .HasColumnName("member_welcome_message");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<long>("GuildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("guild_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_disabled");

                    b.Property<long?>("MemberEventsLogChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("member_events_log_channel_id");

                    b.Property<long?>("MemberWelcomeEmbedConfigId")
                        .HasColumnType("bigint")
                        .HasColumnName("member_welcome_embed_config_id");

                    b.Property<long?>("MessageDeletedEventsLogChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("message_deleted_events_log_channel_id");

                    b.Property<long?>("MessageUpdatedEventsLogChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("message_updated_events_log_channel_id");

                    b.Property<long>("MuteRoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("mute_role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("GuildId")
                        .IsUnique();

                    b.HasIndex("MemberWelcomeEmbedConfigId")
                        .IsUnique();

                    b.ToTable("moderation_config");
                });

            modelBuilder.Entity("Lisbeth.Bot.Domain.Entities.Mute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AppliedById")
                        .HasColumnType("bigint")
                        .HasColumnName("applied_by_id");

                    b.Property<DateTime?>("AppliedUntil")
                        .IsRequired()
                        .HasColumnType("timestamp")
                        .HasColumnName("applied_until");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<long>("GuildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("guild_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_disabled");

                    b.Property<long>("LiftedById")
                        .HasColumnType("bigint")
                        .HasColumnName("lifted_by_id");

                    b.Property<DateTime?>("LiftedOn")
                        .HasColumnType("timestamp")
                        .HasColumnName("lifted_on");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("reason");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("mute");
                });

            modelBuilder.Entity("Lisbeth.Bot.Domain.Entities.Prune", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("channel_id");

                    b.Property<int>("Count")
                        .HasColumnType("int")
                        .HasColumnName("count");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<long>("GuildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("guild_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_disabled");

                    b.Property<string>("Messages")
                        .HasColumnType("text")
                        .HasColumnName("messages");

                    b.Property<long>("ModeratorId")
                        .HasColumnType("bigint")
                        .HasColumnName("moderator_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("prune");
                });

            modelBuilder.Entity("Lisbeth.Bot.Domain.Entities.RecurringReminder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("CronExpression")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("cron_expression");

                    b.Property<long?>("EmbedConfigId")
                        .HasColumnType("bigint")
                        .HasColumnName("embed_config_id");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guild_id");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_disabled");

                    b.Property<bool>("IsGuildReminder")
                        .HasColumnType("boolean")
                        .HasColumnName("is_guild_reminder");

                    b.Property<string>("Mentions")
                        .HasColumnType("text")
                        .HasColumnName("tags");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("EmbedConfigId")
                        .IsUnique();

                    b.HasIndex("GuildId");

                    b.ToTable("recurring_reminder");
                });

            modelBuilder.Entity("Lisbeth.Bot.Domain.Entities.Reminder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<long?>("EmbedConfigId")
                        .HasColumnType("bigint")
                        .HasColumnName("embed_config_id");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guild_id");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_disabled");

                    b.Property<bool>("IsGuildReminder")
                        .HasColumnType("boolean")
                        .HasColumnName("is_guild_reminder");

                    b.Property<string>("Mentions")
                        .HasColumnType("text")
                        .HasColumnName("tags");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("SetFor")
                        .HasColumnType("timestamp")
                        .HasColumnName("set_for");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("EmbedConfigId")
                        .IsUnique();

                    b.HasIndex("GuildId");

                    b.ToTable("reminder");
                });

            modelBuilder.Entity("Lisbeth.Bot.Domain.Entities.RoleMenu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<long?>("EmbedConfigId")
                        .HasColumnType("bigint")
                        .HasColumnName("embed_config_id");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guild_id");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_disabled");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint")
                        .HasColumnName("message_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("RoleEmojiMapping")
                        .HasColumnType("text")
                        .HasColumnName("role_emoji_mapping");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("EmbedConfigId")
                        .IsUnique();

                    b.HasIndex("GuildId");

                    b.ToTable("role_menu");
                });

            modelBuilder.Entity("Lisbeth.Bot.Domain.Entities.ServerBooster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BoostCount")
                        .HasColumnType("int")
                        .HasColumnName("boost_count");

                    b.Property<DateTime>("BoostingSince")
                        .HasColumnType("timestamp")
                        .HasColumnName("boosting_since");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<long>("GuildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("guild_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_disabled");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.HasKey("Id");

                    b.ToTable("server_booster");
                });

            modelBuilder.Entity("Lisbeth.Bot.Domain.Entities.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<long?>("EmbedConfigId")
                        .HasColumnType("bigint")
                        .HasColumnName("embed_config_id");

                    b.Property<long>("GuildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("guild_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_disabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.HasKey("Id");

                    b.HasIndex("EmbedConfigId")
                        .IsUnique();

                    b.HasIndex("GuildId");

                    b.ToTable("tag");
                });

            modelBuilder.Entity("Lisbeth.Bot.Domain.Entities.Ticket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AddedRoleIds")
                        .HasColumnType("text")
                        .HasColumnName("added_roles");

                    b.Property<string>("AddedUserIds")
                        .HasColumnType("text")
                        .HasColumnName("added_users");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("channel_id");

                    b.Property<long?>("ClosedById")
                        .HasColumnType("bigint")
                        .HasColumnName("closed_by_id");

                    b.Property<DateTime?>("ClosedOn")
                        .HasColumnType("timestamp")
                        .HasColumnName("closed_on");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<long>("GuildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("guild_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<long>("GuildSpecificId")
                        .HasColumnType("bigint")
                        .HasColumnName("guild_specific_id");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_disabled");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean")
                        .HasColumnName("is_private");

                    b.Property<long?>("MessageCloseId")
                        .HasColumnType("bigint")
                        .HasColumnName("message_close_id");

                    b.Property<long>("MessageOpenId")
                        .HasColumnType("bigint")
                        .HasColumnName("message_open_id");

                    b.Property<long?>("MessageReopenId")
                        .HasColumnType("bigint")
                        .HasColumnName("message_reopen_id");

                    b.Property<long?>("ReopenedById")
                        .HasColumnType("bigint")
                        .HasColumnName("reopened_by_id");

                    b.Property<DateTime?>("ReopenedOn")
                        .HasColumnType("timestamp")
                        .HasColumnName("reopened_on");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("ticket");
                });

            modelBuilder.Entity("Lisbeth.Bot.Domain.Entities.TicketingConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BaseCenterMessage")
                        .HasColumnType("text")
                        .HasColumnName("center_message_description");

                    b.Property<string>("BaseWelcomeMessage")
                        .HasColumnType("text")
                        .HasColumnName("welcome_message_description");

                    b.Property<long?>("CenterEmbedConfigId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bigint")
                        .HasColumnName("center_embed_config_id");

                    b.Property<long?>("CleanAfter")
                        .HasColumnType("bigint")
                        .HasColumnName("clean_after");

                    b.Property<long?>("CloseAfter")
                        .HasColumnType("bigint")
                        .HasColumnName("close_after");

                    b.Property<long>("ClosedCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("closed_category_id");

                    b.Property<string>("ClosedNamePrefix")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("closed_name_prefix");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<long>("GuildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("guild_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_disabled");

                    b.Property<long>("LastTicketId")
                        .HasColumnType("bigint")
                        .HasColumnName("last_ticket_id");

                    b.Property<long?>("LogChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("log_channel_id");

                    b.Property<long>("OpenedCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("opened_category_id");

                    b.Property<string>("OpenedNamePrefix")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("opened_name_prefix");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long?>("WelcomeEmbedConfigId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bigint")
                        .HasColumnName("center_embed_config_id");

                    b.HasKey("Id");

                    b.HasIndex("CenterEmbedConfigId")
                        .IsUnique();

                    b.HasIndex("GuildId")
                        .IsUnique();

                    b.HasIndex("WelcomeEmbedConfigId")
                        .IsUnique();

                    b.ToTable("ticketing_config");
                });

            modelBuilder.Entity("MikyM.Common.Domain.Entities.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AffectedColumns")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("affected_columns");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_disabled");

                    b.Property<string>("NewValues")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("new_values");

                    b.Property<string>("OldValues")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("old_values");

                    b.Property<string>("PrimaryKey")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("primary_key");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("table_name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("audit_log");
                });

            modelBuilder.Entity("Lisbeth.Bot.Domain.Entities.Ban", b =>
                {
                    b.HasOne("Lisbeth.Bot.Domain.Entities.Guild", "Guild")
                        .WithMany("Bans")
                        .HasForeignKey("GuildId")
                        .HasPrincipalKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Lisbeth.Bot.Domain.Entities.GuildServerBooster", b =>
                {
                    b.HasOne("Lisbeth.Bot.Domain.Entities.Guild", "Guild")
                        .WithMany("GuildServerBoosters")
                        .HasForeignKey("GuildId")
                        .HasPrincipalKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lisbeth.Bot.Domain.Entities.ServerBooster", "ServerBooster")
                        .WithMany("GuildServerBoosters")
                        .HasForeignKey("ServerBoosterId")
                        .HasPrincipalKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");

                    b.Navigation("ServerBooster");
                });

            modelBuilder.Entity("Lisbeth.Bot.Domain.Entities.ModerationConfig", b =>
                {
                    b.HasOne("Lisbeth.Bot.Domain.Entities.Guild", "Guild")
                        .WithOne("ModerationConfig")
                        .HasForeignKey("Lisbeth.Bot.Domain.Entities.ModerationConfig", "GuildId")
                        .HasPrincipalKey("Lisbeth.Bot.Domain.Entities.Guild", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lisbeth.Bot.Domain.Entities.EmbedConfig", "MemberWelcomeEmbedConfig")
                        .WithOne("ModerationConfig")
                        .HasForeignKey("Lisbeth.Bot.Domain.Entities.ModerationConfig", "MemberWelcomeEmbedConfigId");

                    b.Navigation("Guild");

                    b.Navigation("MemberWelcomeEmbedConfig");
                });

            modelBuilder.Entity("Lisbeth.Bot.Domain.Entities.Mute", b =>
                {
                    b.HasOne("Lisbeth.Bot.Domain.Entities.Guild", "Guild")
                        .WithMany("Mutes")
                        .HasForeignKey("GuildId")
                        .HasPrincipalKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Lisbeth.Bot.Domain.Entities.Prune", b =>
                {
                    b.HasOne("Lisbeth.Bot.Domain.Entities.Guild", "Guild")
                        .WithMany("Prunes")
                        .HasForeignKey("GuildId")
                        .HasPrincipalKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Lisbeth.Bot.Domain.Entities.RecurringReminder", b =>
                {
                    b.HasOne("Lisbeth.Bot.Domain.Entities.EmbedConfig", "EmbedConfig")
                        .WithOne("RecurringReminder")
                        .HasForeignKey("Lisbeth.Bot.Domain.Entities.RecurringReminder", "EmbedConfigId");

                    b.HasOne("Lisbeth.Bot.Domain.Entities.Guild", "Guild")
                        .WithMany("RecurringReminders")
                        .HasForeignKey("GuildId")
                        .HasPrincipalKey("GuildId");

                    b.Navigation("EmbedConfig");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Lisbeth.Bot.Domain.Entities.Reminder", b =>
                {
                    b.HasOne("Lisbeth.Bot.Domain.Entities.EmbedConfig", "EmbedConfig")
                        .WithOne("Reminder")
                        .HasForeignKey("Lisbeth.Bot.Domain.Entities.Reminder", "EmbedConfigId");

                    b.HasOne("Lisbeth.Bot.Domain.Entities.Guild", "Guild")
                        .WithMany("Reminders")
                        .HasForeignKey("GuildId")
                        .HasPrincipalKey("GuildId");

                    b.Navigation("EmbedConfig");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Lisbeth.Bot.Domain.Entities.RoleMenu", b =>
                {
                    b.HasOne("Lisbeth.Bot.Domain.Entities.EmbedConfig", "EmbedConfig")
                        .WithOne("RoleMenu")
                        .HasForeignKey("Lisbeth.Bot.Domain.Entities.RoleMenu", "EmbedConfigId");

                    b.HasOne("Lisbeth.Bot.Domain.Entities.Guild", "Guild")
                        .WithMany("RoleMenus")
                        .HasForeignKey("GuildId")
                        .HasPrincipalKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmbedConfig");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Lisbeth.Bot.Domain.Entities.Tag", b =>
                {
                    b.HasOne("Lisbeth.Bot.Domain.Entities.EmbedConfig", "EmbedConfig")
                        .WithOne("Tag")
                        .HasForeignKey("Lisbeth.Bot.Domain.Entities.Tag", "EmbedConfigId");

                    b.HasOne("Lisbeth.Bot.Domain.Entities.Guild", "Guild")
                        .WithMany("Tags")
                        .HasForeignKey("GuildId")
                        .HasPrincipalKey("GuildId");

                    b.Navigation("EmbedConfig");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Lisbeth.Bot.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("Lisbeth.Bot.Domain.Entities.Guild", "Guild")
                        .WithMany("Tickets")
                        .HasForeignKey("GuildId")
                        .HasPrincipalKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Lisbeth.Bot.Domain.Entities.TicketingConfig", b =>
                {
                    b.HasOne("Lisbeth.Bot.Domain.Entities.EmbedConfig", "CenterEmbedConfig")
                        .WithOne("TicketingConfigWithCenterMessage")
                        .HasForeignKey("Lisbeth.Bot.Domain.Entities.TicketingConfig", "CenterEmbedConfigId");

                    b.HasOne("Lisbeth.Bot.Domain.Entities.Guild", "Guild")
                        .WithOne("TicketingConfig")
                        .HasForeignKey("Lisbeth.Bot.Domain.Entities.TicketingConfig", "GuildId")
                        .HasPrincipalKey("Lisbeth.Bot.Domain.Entities.Guild", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lisbeth.Bot.Domain.Entities.EmbedConfig", "WelcomeEmbedConfig")
                        .WithOne("TicketingConfigWithWelcomeMessage")
                        .HasForeignKey("Lisbeth.Bot.Domain.Entities.TicketingConfig", "WelcomeEmbedConfigId");

                    b.Navigation("CenterEmbedConfig");

                    b.Navigation("Guild");

                    b.Navigation("WelcomeEmbedConfig");
                });

            modelBuilder.Entity("Lisbeth.Bot.Domain.Entities.EmbedConfig", b =>
                {
                    b.Navigation("ModerationConfig");

                    b.Navigation("RecurringReminder");

                    b.Navigation("Reminder");

                    b.Navigation("RoleMenu");

                    b.Navigation("Tag");

                    b.Navigation("TicketingConfigWithCenterMessage");

                    b.Navigation("TicketingConfigWithWelcomeMessage");
                });

            modelBuilder.Entity("Lisbeth.Bot.Domain.Entities.Guild", b =>
                {
                    b.Navigation("Bans");

                    b.Navigation("GuildServerBoosters");

                    b.Navigation("ModerationConfig");

                    b.Navigation("Mutes");

                    b.Navigation("Prunes");

                    b.Navigation("RecurringReminders");

                    b.Navigation("Reminders");

                    b.Navigation("RoleMenus");

                    b.Navigation("Tags");

                    b.Navigation("TicketingConfig");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Lisbeth.Bot.Domain.Entities.ServerBooster", b =>
                {
                    b.Navigation("GuildServerBoosters");
                });
#pragma warning restore 612, 618
        }
    }
}
